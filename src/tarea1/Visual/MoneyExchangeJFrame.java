/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tarea1.Visual;

import tarea1.Visual.InformeJFrame;
import java.awt.Dialog;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import tarea1.Cliente;
import tarea1.Conversion;
import tarea1.Conversion_Nueva;
import tarea1.Equivalencias_Nuevas;

/**
 *
 * @author josue
 */
public class MoneyExchangeJFrame extends javax.swing.JFrame {

    private Conversion_Nueva convercion;
    private Equivalencias_Nuevas equivalencias;
    private MenuJframe menu;
    private File file;

    /**
     * Creates new form CajeroJFrame
     */
    public MoneyExchangeJFrame(Conversion_Nueva convercion, Equivalencias_Nuevas equivalecia) {
        initComponents();
        this.convercion = convercion;
        this.equivalencias = equivalecia;
        cargarArchivo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resultadoLabel = new javax.swing.JLabel();
        monedaDestinoComboBox1 = new javax.swing.JComboBox<>();
        monedaOrigenComboBox = new javax.swing.JComboBox<>();
        origenLabel = new javax.swing.JLabel();
        convertirButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        destinoLabel = new javax.swing.JLabel();
        montoOrigenTextField1 = new javax.swing.JTextField();
        montoDestinoLabel = new javax.swing.JLabel();

        setTitle("CRUnion - Money Exchage");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        resultadoLabel.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        resultadoLabel.setText("Monto a entregar:");

        monedaDestinoComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Moneda Destino", "D贸lar Estado Unidense", "Euros", "Colones", "Pesos Mexicanos", "C贸rdobas Oro", "Pesos Argentinos", "Libras Esterlina", "Yen" }));

        monedaOrigenComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Moneda Origen", "D贸lar Estado Unidense", "Euros", "Colones", "Pesos Mexicanos", "C贸rdobas Oro", "Pesos Argentinos", "Libras Esterlina", "Yen" }));
        monedaOrigenComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monedaOrigenComboBoxActionPerformed(evt);
            }
        });

        origenLabel.setText("Moneda origen");

        convertirButton.setText("CONVERTIR");
        convertirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertirButtonActionPerformed(evt);
            }
        });

        destinoLabel.setText("Moneda destino:");

        montoOrigenTextField1.setText("0.00");

        montoDestinoLabel.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        montoDestinoLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        montoDestinoLabel.setText("0.00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(origenLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(montoOrigenTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                                .addComponent(monedaOrigenComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(monedaDestinoComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(convertirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(resultadoLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(montoDestinoLabel))
                                    .addComponent(destinoLabel))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap(144, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {convertirButton, monedaDestinoComboBox1, monedaOrigenComboBox, montoOrigenTextField1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(origenLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(montoOrigenTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monedaOrigenComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(destinoLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(convertirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monedaDestinoComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultadoLabel)
                    .addComponent(montoDestinoLabel))
                .addGap(35, 35, 35))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {convertirButton, monedaDestinoComboBox1, monedaOrigenComboBox, montoOrigenTextField1});

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cargarArchivo(){
        try {
            this.file = new File("TransaccionesRealizdas.txt");
            boolean flag = getFile().createNewFile();
            if (flag) {
                System.out.println("Se creo el archivo");
            }
            else {
                System.out.println("El archivo ya existe");
            }
        }
        catch(IOException e) {
            System.out.println("Exception Occurred:");
            e.printStackTrace();
        }
    }
    
    
    //Valida si el id del cliente se encuentra dentro del ArrayList de clientes
    public boolean validarCliente(int idCliente){
        this.menu.getClientes().cargarArrayClientes();
        for(Cliente cliente:menu.getClientes().getClientesArray()){
            if(cliente.getIDCLIENTE() == idCliente)
                return true;
        }
        return false;
    }
    //Realiza la convercion de divisas en la calculadora y muestra el resultado cuando se selecciona convertir.
    private void convertirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertirButtonActionPerformed
        
        float montoOrigen, montoDestino;
        String monedaOrigen = (String) monedaOrigenComboBox.getSelectedItem();
        String monedaDestino = (String) monedaDestinoComboBox1.getSelectedItem();
        
        //Atrapa el error si el usuario no digita un monto origen valido y le asigna un 0 si es asi.
        try{
           montoOrigen = Float.parseFloat(montoOrigenTextField1.getText()); 
        }catch(NumberFormatException ex){
           montoOrigen = 0;
        }
        
        if (monedaDestino == "Seleccione Moneda Destino" || monedaOrigen == "Seleccione Moneda Origen") {
            montoDestinoLabel.setText("Debe Seleccionar Correctamente las Monedas");
        }//Si no selecciona una moneda destino u origen se lo dice al usuario.
        else if(montoOrigen <= 0){
            montoDestinoLabel.setText("Debe ingresar un monto valido");
        }//Si el monto es 0 le indica al usuario de que debe ingresar un monto valido.
        else {
            procederConvercion(montoOrigen, monedaOrigen, monedaDestino);
        }//Si el monto es valido y se selecciono correctamente la divisa origen y destino, realiza la convercion.

        // TODO add your handling code here:
    }//GEN-LAST:event_convertirButtonActionPerformed
    
    private void procederConvercion(float montoOrigen, String monedaOrigen, String monedaDestino){
        float montoDestino;
        int idCliente = 0;
        try{
            idCliente = Integer.parseInt(JOptionPane.showInputDialog("Digite el ID"));
        }catch(java.lang.NumberFormatException e){
            JOptionPane.showMessageDialog(this, "No ingreso un valor valido");
            return;
        }
        
            if(!validarCliente(idCliente)){
                montoDestinoLabel.setText("El cliente no existe, no se puede realizar la operacion");
            }
            else{
                
                montoDestino = convercion.convercionMoneda(monedaOrigen, monedaDestino, montoOrigen);
                if (JOptionPane.showConfirmDialog(null, "Acepta la convercion \n" 
                        + montoDestino
                        + " " + monedaDestino, "WARNING",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) { //JopctionPane con las opciones de si acepta la conversion
                    montoDestinoLabel.setText((montoDestino) + " " + monedaDestino);
                    try {
                        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("TransaccionesRealizdas.txt", true)));
                        out.println(idCliente + "," + monedaOrigen + ","+ montoOrigen + "," + monedaDestino + "," + montoDestino);
                        out.close();
                    } catch (IOException e) {
                        System.out.println("Ocurrio una excepcion");
                        e.printStackTrace();
                    }

                } 
                else {
                // no option
                }
            }
    }
    //Asegura que el usuario seleccione divisas distintas de origen y destino para convertir.
    
    //Escibir en el archivo 
    private void monedaOrigenComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monedaOrigenComboBoxActionPerformed
        String monedaSeleccionadaOrigen = (String) monedaOrigenComboBox.getSelectedItem();
        String monedaSeleccionadaDestino = (String) monedaDestinoComboBox1.getSelectedItem();
        monedaDestinoComboBox1.setModel(
                new javax.swing.DefaultComboBoxModel<>(
                        new String[]{
                            "Seleccione Moneda Destino", "D贸lar Estado Unidense","Euros", 
                            "Colones", "Pesos Mexicanos", "C贸rdobas Oro", 
                            "Pesos Argentinos", "Libras Esterlina", "Yen"
                        }
                )
        ); //Asigna el modelo original en el combo box de moneda destino
        monedaDestinoComboBox1.removeItem(monedaSeleccionadaOrigen);//Elimina la moneda origen en el combo box de la moneda destino.
    }//GEN-LAST:event_monedaOrigenComboBoxActionPerformed

    //Abre la ventana con la informacion de los dolares comprados y vendidos al cerrar la calculadora
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        InformeJFrame informe = new InformeJFrame(convercion.getTotalDolaresComprados(), convercion.getTotalDolaresVendidos());
        informe.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        int count = 0;
        ArrayList<String> modeloList = new ArrayList();
        for (String string : equivalencias.getDescripcionesMonedas()) {
            if(string != "-Vacio-"){
                modeloList.add(string);
            }
        }
        String mostrarModelo[] = new String[modeloList.size()];
        mostrarModelo = modeloList.toArray(mostrarModelo);
        
        
        monedaOrigenComboBox.setModel(
                new javax.swing.DefaultComboBoxModel<>(
                        mostrarModelo
                )
        );   
        monedaDestinoComboBox1.setModel(
                new javax.swing.DefaultComboBoxModel<>(
                        mostrarModelo
                )
        );    
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public Conversion obtenerConvercion(){
        return convercion;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertirButton;
    private javax.swing.JLabel destinoLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> monedaDestinoComboBox1;
    private javax.swing.JComboBox<String> monedaOrigenComboBox;
    private javax.swing.JLabel montoDestinoLabel;
    private javax.swing.JTextField montoOrigenTextField1;
    private javax.swing.JLabel origenLabel;
    private javax.swing.JLabel resultadoLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the menu
     */
    public MenuJframe getMenu() {
        return menu;
    }

    /**
     * @param menu the menu to set
     */
    public void setMenu(MenuJframe menu) {
        this.menu = menu;
    }

    /**
     * @return the file
     */
    public File getFile() {
        return file;
    }
}
